from src.item import Itemclass Boq:    def __init__(self, data, rates, categoriser):        """        Provides functionality that summarises, and categorises items in a BoQ        :param data: Dataframe containing filtered and transformed data (pandas.DataFrame)        :param rates: Category rates (dict)        :param categoriser: A instance of a Categoriser class        """        self._rates = rates        self._categoriser = categoriser        self._items = [            Item(row["Size"], row["Count"], row["Area"], row["Surface Area"], self._categoriser())            for _, row in data.iterrows()        ]    def summary(self):        """        Generate a summary of the BoQ object's items        :return: Dictionary of format {category: {quantity: value, rate: value, cost: value}}        """        boq = {}        category_quantities = self._get_category_quantities()        for category, quantity in category_quantities.items():            rate = self._rates[category]            boq[category] = {'quantity': quantity, 'rate': rate, 'cost': quantity * rate}        total = sum(item['cost'] for item in boq.values())        boq['total'] = {'quantity': 0, 'rate': 0, 'cost': total}        return boq    def _get_category_quantities(self):        quantities = {}        for item in self._items:            quantities.setdefault(item.category, 0)            quantities[item.category] += item.count * item.boq_area        return quantities