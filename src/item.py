import reclass Item:    def __init__(self, size: str, count: str, area: str, surface_area: str, categoriser):        self._size = size        self._count = count        self._area = area        self._surface_area = surface_area        self._categoriser = categoriser    @property    def category(self):        return self._categoriser.evaluate(self.max_width, self.max_height)    @property    def max_width(self):        return max([int(item[0]) for item in self.size])    @property    def max_height(self):        return max([int(item[1]) for item in self.size])    @property    def area(self):        search = re.findall(r'(\d+.\d*)', str(self._area))        if len(search) != 0:            return float(search[0])        return 0    @property    def size(self):        if self._size is not None:            sizes = [tuple(size.split('x')) for size in self._get_sizes()]            return self._verified(sizes)        return '0', '0'    def _verified(self, sizes):        for size in sizes:            if len(size) != 2:                raise ValueError("Invalid size string provided.")        return sizes    def _get_sizes(self):        if self._size is not None:            sizes = self._size.split('-')            return sizes        return '0', '0'    @property    def surface_area(self):        if self.max_width > 0 and self.max_height > 0:            search = re.findall(r'(\d+.\d*)', str(self._surface_area))            if len(search) != 0:                return float(search[0])        return 0    @property    def count(self):        return int(self._count)    @property    def boq_area(self):        return max(self.area, self.surface_area)